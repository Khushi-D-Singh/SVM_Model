# -*- coding: utf-8 -*-
"""Recognise numbers using SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1youc7sLbAa5mh7fnkVm5mMZ8jAb687xE
"""

# Import the required libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import classification_report, confusion_matrix

# Load the digits dataset
digits = datasets.load_digits()
X = digits.data  # Features (images)
y = digits.target  # Labels (digits)

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create an SVM classifier
model = svm.SVC(gamma='scale')

# Train the model
model.fit(X_train, y_train)

# Making the predictions
y_pred = model.predict(X_test)

# Evaluating the model
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Example of making a prediction
sample_image = X_test[0].reshape(1, -1)  # Reshape for a single sample
predicted_digit = model.predict(sample_image)
print(f'Predicted digit: {predicted_digit[0]}')